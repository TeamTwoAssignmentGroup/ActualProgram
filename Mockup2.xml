<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mockup2</name>
    </assembly>
    <members>
        <member name="F:Mockup2.AdminForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AdminForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AdminForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.CustomTable">
            <summary>
            OUT OF ORDER 
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.DBConnection">
            <summary>
            A helper class for wrapping a MySQLConnection
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates the underlying MySQLConnection based on the input parameters, and then attempts to open the connection.
            Failure outputs the exception to Console.
            </summary>
            <param name="server">Server hostname.</param>
            <param name="database">Database to use once connected.</param>
            <param name="username">Username to login with.</param>
            <param name="password">Password to use.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.Close">
            <summary>
            Ensures the connection is closed cleanly to prevent memory leaks.
            Closes and disposes the underlying MySQLConnection.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.#ctor">
            <summary>
            Overloaded constructor for convenience of connecting to a particular database.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.GetConnection">
            <summary>
            Gets the underlying MySQL connection for processes that require it.
            </summary>
            <returns>The underlying MySQL connection.</returns>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Emailer">
            <summary>
            Static help class to send an email. Uses the Gmail smtp server, which requires an authorized user to send emails.
            One was created specifically for this project.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.Emailer.SendEmail(System.String,System.String,System.String,System.String[])">
            <summary>
            Sends an email message to the supplied email address, using the supplied subject and message.
            </summary>
            <param name="email">Email address of the recipient.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="message">The email message itself.</param>
            <param name="fileNamesToAttach">File names as strings to attach to this email, if any.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.Emailer.SendAppointmentEmail(System.String,Mockup2.DatabaseClasses.Staff,System.DateTime,System.DateTime)">
            <summary>
            Sends a preformatted HTML email to the supplied email address, which should be a Patient's, detailing their appointment date and time
            as well as the member of staff they will be seeing.
            </summary>
            <param name="email">Email address of patient.</param>
            <param name="staff">The Staff object that representing the member of staff that the patient will be seeing.</param>
            <param name="date">The date of the appointment.</param>
            <param name="time">The time of the appointment.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.QueryBuilder">
            <summary>
            The QueryBuilder class facilitates a more OO approach to constructing valid SQL queries. It employs the builder pattern to enable
            method chaining, which makes constructing a query a bit more natural.
            The methods that relate to SQL statements (SELECT, for instance) only allow Column objects to be passed in -
            this is to prevent spelling mistakes and other annoying bugs commonly found when heavily relying on strings.
            It should be noted that this class only supports a small subset of the full SQL specification, the smallest subset
            required for this project.
            Here is a small example of how to use this class:
            <code>
            QueryBuilder b = new QueryBuilder();
            b.Select(Tables.ALL).From(Tables.PATIENT_TABLE); // Selects everything from the Patient table
            string query = b.ToString();
            </code>
            Another example, that utilizes the Where clause to find staff who are doctors:
            <code>
            QueryBuilder b = new QueryBuilder();
            b.Select(Tables.ALL).From(Tables.STAFF_TABLE).Where(b.IsEquals(Tables.STAFF_TABLE.JobRole,"Doctor"));
            string query = b.ToString();
            </code>
            This class keeps a track of all queries it is asked to produce, as well as how many times each query is requested,
            for debug purposes. This will be useful in troubleshooting slow database queries; for example, somebody
            may have accidentally been creating and running queries in a loop.
            It should be noted that this class does not perform any form of error or sanity checking and will allow you to create nonsensical SQL queries
            provided you use valid Column and Table names, except in the case where the SQL query contains an Update statement.
            If an Update statement is present without a Where statement, an exception is thrown. This is due to the fact that
            updating an SQL table without specifying a Where clause will overwrite every row, causing irreperable data loss.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.AddQuery(System.String)">
            <summary>
            Adds the supplied query to pastQueries dictionary, incrementing
            the number of times it has been created if it already exists.
            </summary>
            <param name="q">The query to add.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.OrderBy(System.Boolean,Mockup2.DatabaseClasses.Tables.Column[])">
            <summary>
            Adds an Order By statement to the current SQL query. Can choose whether to be
            ascending or descending.
            </summary>
            <param name="desc">Whether ordering should be descending or not.</param>
            <param name="columns">The Columns to order by.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Limit(System.Int32)">
            <summary>
             Adds a Limit statement to the current SQL query. Allows results to be limited.
            </summary>
            <param name="num">Number of results to limit query to.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Delete(Mockup2.DatabaseClasses.Tables.Table)">
            <summary>
            Adds a Delete From statement to the current SQL query.
            </summary>
            <param name="table">The Table to be deleting from.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Update(Mockup2.DatabaseClasses.Tables.Table)">
            <summary>
            Adds an Update statement to the current SQL query. Only supports updating
            one table at present. This can be easily changed later, if need be.
            This method MUST be paired with a Where method,
            else QueryBuilder will throw an exception. See the class description for more details.
            </summary>
            <param name="table">The Table to be updated.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Insert(Mockup2.DatabaseClasses.Tables.Table)">
            <summary>
            Adds an Insert statement to the current SQL query.
            </summary>
            <param name="table">The Table to be inserted into.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Values(System.Object[])">
            <summary>
            Adds a Values statement to the current SQL query.
            There are two ways to perform an insert in SQL - the first is to specify both column name and value,
            which allows you to leave some values out and have them default.
            The second is to not specify column names, but instead specify all values in the correct order.
            This method uses the latter, so ensure you supply ALL values for the given Table, and that they are the
            correct data type.
            </summary>
            <param name="values">The objects that will be used as values to insert into Table.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Set(System.Object[])">
            <summary>
            Adds a Set statement to the current SQL query. A word of warning for the parameters:
            to satisfy SQL, they must be pairs of Column and value. However, there is no way to enforce
            this and still have the amount supplied be variable (without creating a Tuple, or something similar),
            so please ensure you supply a Column and a value.
            </summary>
            <param name="o">Objects that correspond to pairs of Columns and values to be inserted into said Column.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.GetSelectedColumns">
            <summary>
            Returns the list of Columns that have been used in a Select method.
            </summary>
            <returns>A list of Columns.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Select(Mockup2.DatabaseClasses.Tables.Column[])">
            <summary>
            Adds a Select statement to the current SQL query.
            </summary>
            <param name="columns">The Columns to be selected from the Tables.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.TrimQuery(System.Int32)">
            <summary>
            Convenience method to quickly trim the query string down by a specified amount of characters.
            Used to remove trailing characters such as commas from the ends of statements.
            </summary>
            <param name="amount">The amount of characters to trim from the end of the string.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.From(Mockup2.DatabaseClasses.Tables.Table[])">
            <summary>
            Adds a From statement to the current SQL query.
            </summary>
            <param name="tables">The tables to be used in the From statement.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Where(Mockup2.DatabaseClasses.QueryBuilder.WhereClass[])">
            <summary>
            Adds a Where statement to the current SQL query. This method takes a list of WhereClass instances as it's parameter.
            </summary>
            <param name="clauses">The WhereClass instances to add to this query.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.And">
            <summary>
            A WhereClass for an SQL And statement. To be used in conjunction with a Where method.
            </summary>
            <returns>A WhereClass representing the SQL And statement.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Or">
            <summary>
            A WhereClass for an SQL Or statement. To be used in conjunction with a Where method.
            </summary>
            <returns>A WhereClass representing the SQL Or statement.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.IsEqual(Mockup2.DatabaseClasses.Tables.Column,System.Object)">
            <summary>
            A WhereClass for an SQL equals check. To be used in conjunction with a Where method.
            Takes a Column and an object.
            </summary>
            <param name="column1">The Column to be checked.</param>
            <param name="o">The object to be checked.</param>
            <returns>A WhereClass that represents the equality check in SQL.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.IsLessThan(Mockup2.DatabaseClasses.Tables.Column,System.Object)">
            <summary>
            A WhereClass for an SQL less than check. To be used in conjunction with a Where method.
            Takes a Column and an object.
            </summary>
            <param name="column1">The Column to be checked.</param>
            <param name="o">The object to be checked.</param>
            <returns>A WhereClass that represents the less than statement in SQL.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.ToString">
            <summary>
            Adds a semicolon to the finished query, and adds the query to the running list of queries performed.
            Checks to see if an Update statement is present without a Where statement, and throws an exception if so.
            </summary>
            <returns>A valid SQL query string.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.DumpLog">
            <summary>
            Dumps the stored queries that have been requested over the program lifetime,
            and how many times they have been requested.
            Outputs this information to standard output and a text file named querylog.txt
            in the same folder as the exe.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables">
            <summary>
            A collection of Table instances that represent the current database. Used primarily
            in QueryBuilder to ensure all queries are valid.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.AllColumn">
            <summary>
            Represents the all coumns operator in SQL (*)
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.AppointmentTable">
            <summary>
            Represents the Appointment table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.MedicalNotesTable">
            <summary>
            Represents the MedicalNotes table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.MedicationTable">
            <summary>
            Represents the Medication table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.MedicationInstanceTable">
            <summary>
            Represents the MedicationInstance table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.PatientTable">
            <summary>
            Represents the Patient table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.PrescriptionTable">
            <summary>
            Represents the Prescription table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.RotaTable">
            <summary>
            Represents the Rota table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.StaffTable">
            <summary>
            Represents the Staff table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.TestResultTable">
            <summary>
            Represents the TestResult table.
            </summary>
        </member>
        <member name="F:Mockup2.AppointmentForms.AddAppointmentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AppointmentForms.AddAppointmentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AppointmentForms.AddAppointmentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.AppointmentForms.FindAppointmentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AppointmentForms.FindAppointmentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AppointmentForms.FindAppointmentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.EditStaffForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.EditStaffForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.EditStaffForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.Factories.AbstractFactory">
            <summary>
            An astract factory class for othe table factories to inherit from. Provides
            some convenience methods for parsing data from the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetInt(System.Object)">
            <summary>
            Parses the given object as an int.
            </summary>
            <param name="o">Object to parse.</param>
            <returns>An int from the object.</returns>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetString(System.Object)">
            <summary>
            Converts the given object to a string. Simply calls
            <code>o.ToString()</code>
            </summary>
            <param name="o">The object to parse.</param>
            <returns>A string from the object.</returns>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetBool(System.Object)">
            <summary>
            Parses the object as a boolean.
            </summary>
            <param name="o">The object to parse.</param>
            <returns>A boolean representation of the object.</returns>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetDateTime(System.Object)">
            <summary>
            Parses the object as a DateTime object.
            </summary>
            <param name="o">The object to parse.</param>
            <returns>A DateTime representation of the object, if possible.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetNextAvailableAppointmentID">
            <summary>
            Returns the next available appointment id. 
            </summary>
            <returns>Next available appointment id.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.SetNextAvailableAppointmentID">
            <summary>
            Sets the next available appointment id by pulling the last listed
            Appointment from the database. Should only be called once.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetTimeslots">
            <summary>
            Returns a list of formatted strings to be used as timeslots when booking an appointment.
            Timeslot increment is given as 10 minutes.
            </summary>
            <returns>A list of strings formatted in the following way: hh:mm:ss, for example: 09:40:00</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointments(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Returns a list of Appointments that match the critera given by the QueryBuilder.
            In order to get sensible results, the first part of the query should be:
            SELECT * FROM Appointment
            with only the Where changing.
            </summary>
            <param name="b">The QueryBuilder to use as the SQL query.</param>
            <returns>A list of Appointments that match the SQL query.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointments">
            <summary>
            Convenience method to return all appointments, with no matching criteria, ie everything.
            </summary>
            <returns>Every appointment in the database.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointmentsByDate(System.DateTime)">
            <summary>
            Conveience method that gets all appointments on a given date.
            </summary>
            <param name="date">The date to match appointments to.</param>
            <returns>A list of appointments booked for the date given.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointmentsByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Convenience method that gets all appointments booked between the given dates.
            </summary>
            <param name="date1">The minimum bound date to look for.</param>
            <param name="date2">The maximum bound date to look for.</param>
            <returns>A list of appointments that fall between the given dates.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.UpdateAppointment(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Updates an existing appointment in the database, based on the information provided
            in the Appointment object.
            </summary>
            <param name="a">The Appointment to pull data from.</param>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.SendConfirmationEmail(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Sends a confirmation email to the patient linked to the appointment given.
            </summary>
            <param name="a">The appointment to notify the patient abour.</param>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.InsertAppointment(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Inserts a new appointment into the database, using information pulled from the given Appointment object.
            
            </summary>
            <param name="a">The appointment object to pull data from.</param>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.DeleteAppointment(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Deletes an appointment from the database based on information given in the supplied Appointment.
            </summary>
            <param name="a">The appointment object to delete.</param>
        </member>
        <member name="M:Mockup2.Factories.CustomTableFactory.GetCustomTable(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Retrieves the stored query from the QueryBuilder and executes it against the database
            provided by the dbCon. The results are stored as a list of dictionary objects keyed to a Column.
            The value is an object. Each dictionary represents a row in table.
            </summary>
            <param name="b">The QueryBuilder object containing the SQL query to invoke against the database.</param>
            <returns>A CustomTable that has the resulting 'table' as a list of <code>Dictionary&lt;Column, object&gt;</code></returns>
        </member>
        <member name="T:Mockup2.Factories.MedicalNoteFactory">
            <summary>
            Helper class to pull whole MedicalNote objects from the database based on various critera.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.GetMedicalNotes(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Gets all MedicalNote objects that match the given SQL query criteria contained in the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder containing the SQL query.</param>
            <returns>A list of MedicalNote objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.GetMedicalNotes(System.Int32)">
            <summary>
            Convenience method to get all MedicalNotes for a particular patient, keyed by their id.
            </summary>
            <param name="patientID">ID of the patient to get MedicalNotes for.</param>
            <returns>A list of MedicalNotes for the Patient given by id.</returns>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.GetMedicalNotes">
            <summary>
            Convenience method to get all the MedicalNotes in the database.
            </summary>
            <returns>A list of all MedialNotes in the database.</returns>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.InsertPatientNote(Mockup2.DatabaseClasses.Patient,System.Collections.Generic.List{System.String})">
            <summary>
            Convenience method to insert a new MedicalNotes object into the database.
            </summary>
            <param name="mn">The MedicalNotes object to pull data from.</param>
        </member>
        <member name="T:Mockup2.Factories.PrescriptionFactory">
            <summary>
            Convenience method to handle returning, updating, and inserting Prescription objects into the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetNextAvailablePrescriptionID">
            <summary>
            Returns the next available prescription id.
            </summary>
            <returns>Next available prescription id.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetPrescriptions(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Gets a list of Prescriptions from the database based on search critera provided by the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder containing the SQL code.</param>
            <returns>A list of Prescriptions.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetPrescriptions">
            <summary>
            Convenience method to get all prescriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetPrescriptions(System.Int32)">
            <summary>
            Convenience method to get all prescriptions based on the patient id they belong to.
            </summary>
            <param name="patientID">ID of the patient to find prescriptions for.</param>
            <returns>A list of Prescriptions.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetLastPrescriptionID">
            <summary>
            Gets the last available prescription id currently in the database.
            </summary>
            <returns>The last available prescription id.</returns>
        </member>
        <member name="T:Mockup2.Factories.StaffFactory">
            <summary>
            Convenience class to handle returning, updating, and inserting Staff objects into the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaffByID(System.Int32)">
            <summary>
            Gets a list of Staff by their ID number. This method should only return a list of size one, but
            that is not guranteed.
            </summary>
            <param name="id">ID of the staff member to look for.</param>
            <returns>A list of Staff.</returns>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaff(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Returns a list of Staff objects based on search critera given the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder containing the SQL code.</param>
            <returns>A list of staff.</returns>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaffByName(System.String,System.String)">
            <summary>
            Return a list of Staff members by their first and last name.
            </summary>
            <param name="firstName">First name to look for.</param>
            <param name="lastName">Last name to look for.</param>
            <returns>A list of Staff objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaff">
            <summary>
            Convenience method to get all Staff members from the database.
            </summary>
            <returns>A list of all Staff</returns>
        </member>
        <member name="T:Mockup2.Factories.TestResultFactory">
            <summary>
            Convenience class to handle returning, updating, and inserting TestResult objects into the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.TestResultFactory.GetTestResults(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Get a list of TestResult objects based on search criteria given the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder object.</param>
            <returns>A list of TestResult objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.TestResultFactory.GetTestResults(System.Int32)">
            <summary>
            Convenience method to get all 
            </summary>
            <param name="patientID"></param>
            <returns></returns>
        </member>
        <member name="T:Mockup2.Factories.PatientFactory">
            <summary>
            Convenience class to handle pulling Patients from, and inserting Patients into, the database. As well as updating them.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.InsertPatient(Mockup2.DatabaseClasses.Patient)">
            <summary>
            Inserts the given Patient information into the database.
            </summary>
            <param name="p">The Patient to pull information from.</param>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.UpdatePatient(Mockup2.DatabaseClasses.Patient)">
            <summary>
            Updates the given Patient information in the database.
            </summary>
            <param name="p">The Patient to get updated information from.</param>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatients(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Returns a list of Patients based on certain search criteria, provided
            by the QueryBuilder SQL code.
            </summary>
            <param name="b">QueryBuilder containing the SQL query to run.</param>
            <returns>A list of Patient objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.DeletePatient(Mockup2.DatabaseClasses.Patient)">
            <summary>
            Delete an entry from the Patient table in the database,
            based on information given by the Patient object.
            </summary>
            <param name="p">Patient representation of information to delete.</param>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatientsByName(System.String,System.String)">
            <summary>
            Conveience method to get all patients by their first and last name.
            Most of the time, this method is expected to return a list containing
            only one value. However, this cannot be guranteed as name collisions
            cannot be prevented. Similarly, it shouln't be assumed this method will
            always return at least one entry - sometimes it doesn't, if the patient cannot be found.
            </summary>
            <param name="firstName">Patient's first name.</param>
            <param name="lastName">Patients's last name.</param>
            <returns>A list of Patients that have the first and last name provided. Size of the list may be more than 1, or 0.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatientsByID(System.Int32)">
            <summary>
            Returns a patient by their Id number.
            </summary>
            <param name="ID">The Patient corresponding to the given ID.</param>
            <returns>A list of patients that match the ID. Should have a size of 1 almost always, but is a list just in case.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatients">
            <summary>
            Convenience method to return all Patients currently stored in the database.
            </summary>
            <returns>A list of all Patients.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.getAPatient(System.String,System.String)">
            returns a patient object by finding it in the database by first and last name
            
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.getPatient(System.String,System.String,Mockup2.DatabaseClasses.QueryBuilder)">
            Executes query in the database to return details to getAPatient() method
            
        </member>
        <member name="M:Mockup2.GPNurse.OK_Click(System.Object,System.EventArgs)">
            This button returns one patient from the database as an object
            can be by name or nhs number
            
        </member>
        <member name="M:Mockup2.GPNurse.selectSearch_Click(System.Object,System.EventArgs)">
            This button (Viev this patient details) loads in selected patient details on the page
            
        </member>
        <member name="M:Mockup2.GPNurse.textBoxWriter(System.Collections.Generic.List{System.String},System.Windows.Forms.RichTextBox)">
            Prinitg any list <string></string> data into the textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.ListBoxWriter(System.Collections.Generic.List{System.String},System.Windows.Forms.ListBox)">
            Prinitg any list <string></string> data into the textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.textBoxCleaner(System.Windows.Forms.RichTextBox)">
            Clears selected textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.textBoxCleaner(System.Windows.Forms.TextBox)">
            Clears selected textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.ListBoxCleaner(System.Windows.Forms.ListBox)">
            Clears selected textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.saveChanges">
            prompting the user to save their work
            
        </member>
        <member name="F:Mockup2.GPNurse.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.GPNurse.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.GPNurse.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.loginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.loginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.loginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.MessagePatientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.MessagePatientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.MessagePatientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.RegisterNewPatientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.RegisterNewPatientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.RegisterNewPatientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.ViewMedicalHistoryForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.ViewMedicalHistoryForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.ViewMedicalHistoryForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.ViewPrescriptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.ViewPrescriptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.ViewPrescriptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.ViewTestHistoryForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.ViewTestHistoryForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.ViewTestHistoryForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PrescriptionForms.AmendPrescriptionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PrescriptionForms.AmendPrescriptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PrescriptionForms.AmendPrescriptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PrescriptionForms.IssuePrescriptionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PrescriptionForms.IssuePrescriptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PrescriptionForms.IssuePrescriptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PrescriptionForms.ViewPrescription.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PrescriptionForms.ViewPrescription.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PrescriptionForms.ViewPrescription.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.ReceptionistForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.ReceptionistForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.ReceptionistForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.ResetPasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.ResetPasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.ResetPasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.SeeStaffListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.SeeStaffListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.SeeStaffListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.updateStaff.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.updateStaff.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.updateStaff.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.appointmentmessage">
            <summary>
              Looks up a localized string similar to &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional //EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:v=&quot;urn:schemas-microsoft-com:vml&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;&gt;&lt;head&gt;
               &lt;!--[if gte mso 9]&gt;&lt;xml&gt;
                &lt;o:OfficeDocumentSettings&gt;
                 &lt;o:AllowPNG/&gt;
                 &lt;o:PixelsPerInch&gt;96&lt;/o:PixelsPerInch&gt;
                &lt;/o:OfficeDocumentSettings&gt;
               &lt;/xml&gt;&lt;![endif]--&gt;
               &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.facebook_2x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.favicon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.formattedemail">
            <summary>
              Looks up a localized string similar to &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional //EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:v=&quot;urn:schemas-microsoft-com:vml&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;&gt;&lt;head&gt;
               &lt;!--[if gte mso 9]&gt;&lt;xml&gt;
                &lt;o:OfficeDocumentSettings&gt;
                 &lt;o:AllowPNG/&gt;
                 &lt;o:PixelsPerInch&gt;96&lt;/o:PixelsPerInch&gt;
                &lt;/o:OfficeDocumentSettings&gt;
               &lt;/xml&gt;&lt;![endif]--&gt;
               &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.googleplus_2x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.logo1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.MySql_Data">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.nhs_logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.okok">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.twitter_2x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
