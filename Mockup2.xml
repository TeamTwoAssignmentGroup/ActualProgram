<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mockup2</name>
    </assembly>
    <members>
        <member name="F:Mockup2.AddPrescription.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AddPrescription.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AddPrescription.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.AdminForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AdminForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AdminForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.AdminForms.ReportBugForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AdminForms.ReportBugForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AdminForms.ReportBugForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.CustomTable">
            <summary>
            OUT OF ORDER 
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.CustomTable.ToString">
            <summary>
            Converts to string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mockup2.DatabaseClasses.DBConnection">
            <summary>
            A helper class for wrapping a MySQLConnection
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates the underlying MySQLConnection based on the input parameters, and then attempts to open the connection.
            Failure outputs the exception to Console.
            </summary>
            <param name="server">Server hostname.</param>
            <param name="database">Database to use once connected.</param>
            <param name="username">Username to login with.</param>
            <param name="password">Password to use.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.Close">
            <summary>
            Ensures the connection is closed cleanly to prevent memory leaks.
            Closes and disposes the underlying MySQLConnection.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.#ctor">
            <summary>
            Overloaded constructor for convenience of connecting to a particular database.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.DBConnection.GetConnection">
            <summary>
            Gets the underlying MySQL connection for processes that require it.
            </summary>
            <returns>The underlying MySQL connection.</returns>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Texter">
            <summary>
            Helper class to send text message confirmation of appointments.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.Texter.SendAppointmentText(System.String,Mockup2.DatabaseClasses.Staff,System.DateTime,System.DateTime)">
            <summary>
            Sends a text confirmation of an appointment to the supplied number, utilising the
            <a href="https://www.nuget.org/packages/Twilio/">Twilio NuGet package</a> and <a href="https://www.twilio.com/">Web API backend</a>. The message includes appointment date and time,
            as well as the name and job role of the medical staff being seen.
            This method expects the mobile number to be properly formatted and have the
            leading +44 intact; this is a requirement of the Twilio backend.
            
            (It should be noted that at current, all texts are received by one phone number - mine. This
            is a restriction in Twilio's free trial service.)
            </summary>
            <param name="number">The mobile phone number to send texts to.</param>
            <param name="staff">The member of <see cref="T:Mockup2.DatabaseClasses.Staff"/>Staff being seen.</param>
            <param name="appointmentDate">The date of the <see cref="T:Mockup2.DatabaseClasses.Appointment"/>Appointment.</param>
            <param name="appointmentTime">The time of the <see cref="T:Mockup2.DatabaseClasses.Appointment"/>Appointment.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.QueryBuilder">
            <summary>
            The QueryBuilder class facilitates a more OO approach to constructing valid SQL queries. It employs the builder pattern to enable
            method chaining, which makes constructing a query a bit more natural.
            The methods that relate to SQL statements (SELECT, for instance) only allow Column objects to be passed in -
            this is to prevent spelling mistakes and other annoying bugs commonly found when heavily relying on strings.
            It should be noted that this class only supports a small subset of the full SQL specification, the smallest subset
            required for this project.
            Here is a small example of how to use this class:
            <code>
            QueryBuilder b = new QueryBuilder();
            b.Select(Tables.ALL).From(Tables.PATIENT_TABLE); // Selects everything from the Patient table
            string query = b.ToString();
            </code>
            Another example, that utilizes the Where clause to find staff who are doctors:
            <code>
            QueryBuilder b = new QueryBuilder();
            b.Select(Tables.ALL).From(Tables.STAFF_TABLE).Where(b.IsEquals(Tables.STAFF_TABLE.JobRole,"Doctor"));
            string query = b.ToString();
            </code>
            This class keeps a track of all queries it is asked to produce, as well as how many times each query is requested,
            for debug purposes. This will be useful in troubleshooting slow database queries; for example, somebody
            may have accidentally been creating and running queries in a loop.
            It should be noted that this class does not perform any form of error or sanity checking and will allow you to create nonsensical SQL queries
            provided you use valid Column and Table names, except in the case where the SQL query contains an Update statement.
            If an Update statement is present without a Where statement, an exception is thrown. This is due to the fact that
            updating an SQL table without specifying a Where clause will overwrite every row, causing irreperable data loss.
            </summary>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.AddQuery(System.String)">
            <summary>
            Adds the supplied query to pastQueries dictionary, incrementing
            the number of times it has been created if it already exists.
            </summary>
            <param name="q">The query to add.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.OrderBy(System.Boolean,Mockup2.DatabaseClasses.Tables.Column[])">
            <summary>
            Adds an Order By statement to the current SQL query. Can choose whether to be
            ascending or descending.
            </summary>
            <param name="desc">Whether ordering should be descending or not.</param>
            <param name="columns">The Columns to order by.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Limit(System.Int32)">
            <summary>
             Adds a Limit statement to the current SQL query. Allows results to be limited.
            </summary>
            <param name="num">Number of results to limit query to.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Delete(Mockup2.DatabaseClasses.Tables.Table)">
            <summary>
            Adds a Delete From statement to the current SQL query.
            </summary>
            <param name="table">The Table to be deleting from.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Update(Mockup2.DatabaseClasses.Tables.Table)">
            <summary>
            Adds an Update statement to the current SQL query. Only supports updating
            one table at present. This can be easily changed later, if need be.
            This method MUST be paired with a Where method,
            else QueryBuilder will throw an exception. See the class description for more details.
            </summary>
            <param name="table">The Table to be updated.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Insert(Mockup2.DatabaseClasses.Tables.Table)">
            <summary>
            Adds an Insert statement to the current SQL query.
            </summary>
            <param name="table">The Table to be inserted into.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Values(System.Object[])">
            <summary>
            Adds a Values statement to the current SQL query.
            There are two ways to perform an insert in SQL - the first is to specify both column name and value,
            which allows you to leave some values out and have them default.
            The second is to not specify column names, but instead specify all values in the correct order.
            This method uses the latter, so ensure you supply ALL values for the given Table, and that they are the
            correct data type.
            </summary>
            <param name="values">The objects that will be used as values to insert into Table.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Set(System.Object[])">
            <summary>
            Adds a Set statement to the current SQL query. A word of warning for the parameters:
            to satisfy SQL, they must be pairs of Column and value. However, there is no way to enforce
            this and still have the amount supplied be variable (without creating a Tuple, or something similar),
            so please ensure you supply a Column and a value.
            </summary>
            <param name="o">Objects that correspond to pairs of Columns and values to be inserted into said Column.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.GetSelectedColumns">
            <summary>
            Returns the list of Columns that have been used in a Select method.
            </summary>
            <returns>A list of Columns.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Select(Mockup2.DatabaseClasses.Tables.Column[])">
            <summary>
            Adds a Select statement to the current SQL query.
            </summary>
            <param name="columns">The Columns to be selected from the Tables.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.TrimQuery(System.Int32)">
            <summary>
            Convenience method to quickly trim the query string down by a specified amount of characters.
            Used to remove trailing characters such as commas from the ends of statements.
            </summary>
            <param name="amount">The amount of characters to trim from the end of the string.</param>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.From(Mockup2.DatabaseClasses.Tables.Table[])">
            <summary>
            Adds a From statement to the current SQL query.
            </summary>
            <param name="tables">The tables to be used in the From statement.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Where(Mockup2.DatabaseClasses.QueryBuilder.WhereClass[])">
            <summary>
            Adds a Where statement to the current SQL query. This method takes a list of WhereClass instances as it's parameter.
            </summary>
            <param name="clauses">The WhereClass instances to add to this query.</param>
            <returns>This instance of QueryBuilder.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.And">
            <summary>
            A WhereClass for an SQL And statement. To be used in conjunction with a Where method.
            </summary>
            <returns>A WhereClass representing the SQL And statement.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.Or">
            <summary>
            A WhereClass for an SQL Or statement. To be used in conjunction with a Where method.
            </summary>
            <returns>A WhereClass representing the SQL Or statement.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.IsEqual(Mockup2.DatabaseClasses.Tables.Column,System.Object)">
            <summary>
            A WhereClass for an SQL equals check. To be used in conjunction with a Where method.
            Takes a Column and an object.
            </summary>
            <param name="column1">The Column to be checked.</param>
            <param name="o">The object to be checked.</param>
            <returns>A WhereClass that represents the equality check in SQL.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.IsLessThan(Mockup2.DatabaseClasses.Tables.Column,System.Object)">
            <summary>
            A WhereClass for an SQL less than check. To be used in conjunction with a Where method.
            Takes a Column and an object.
            </summary>
            <param name="column1">The Column to be checked.</param>
            <param name="o">The object to be checked.</param>
            <returns>A WhereClass that represents the less than statement in SQL.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.ToString">
            <summary>
            Adds a semicolon to the finished query, and adds the query to the running list of queries performed.
            Checks to see if an Update statement is present without a Where statement, and throws an exception if so.
            </summary>
            <returns>A valid SQL query string.</returns>
        </member>
        <member name="M:Mockup2.DatabaseClasses.QueryBuilder.DumpLog">
            <summary>
            Dumps the stored queries that have been requested over the program lifetime,
            and how many times they have been requested.
            Outputs this information to standard output and a text file named querylog.txt
            in the same folder as the exe.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables">
            <summary>
            A collection of Table instances that represent the current database. Used primarily
            in QueryBuilder to ensure all queries are valid.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.AllColumn">
            <summary>
            Represents the all coumns operator in SQL (*)
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.AppointmentTable">
            <summary>
            Represents the Appointment table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.MedicalNotesTable">
            <summary>
            Represents the MedicalNotes table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.MedicationTable">
            <summary>
            Represents the Medication table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.MedicationInstanceTable">
            <summary>
            Represents the MedicationInstance table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.PatientTable">
            <summary>
            Represents the Patient table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.PrescriptionTable">
            <summary>
            Represents the Prescription table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.RotaTable">
            <summary>
            Represents the Rota table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.StaffTable">
            <summary>
            Represents the Staff table.
            </summary>
        </member>
        <member name="T:Mockup2.DatabaseClasses.Tables.TestResultTable">
            <summary>
            Represents the TestResult table.
            </summary>
        </member>
        <member name="F:Mockup2.AppointmentForms.AddAppointmentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AppointmentForms.AddAppointmentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AppointmentForms.AddAppointmentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.AppointmentForms.FindAppointmentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.AppointmentForms.FindAppointmentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.AppointmentForms.FindAppointmentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.Classes.Emailer">
            <summary>
            Static help class to send an email. Uses the Gmail smtp server, which requires an authorized user to send emails.
            One was created specifically for this project.
            </summary>
        </member>
        <member name="M:Mockup2.Classes.Emailer.SendEmailWithAttachments(System.String,System.String,System.String,System.Net.Mail.Attachment[])">
            <summary>
            Sends an email message to the supplied email address, using the supplied subject and message.
            </summary>
            <param name="email">Email address of the recipient.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="message">The email message itself.</param>
            <param name="attachments">A variable list of <see cref="T:System.Net.Mail.Attachment"/>s to send along with the email.</param>
        </member>
        <member name="M:Mockup2.Classes.Emailer.SendEmail(System.String,System.String,System.String,System.String[])">
            <summary>
            Convenience method to send email using strings of local file names as attachments.
            </summary>
            <param name="email">Email address to send email to.</param>
            <param name="subject">Subject of the email.</param>
            <param name="message">Message body of the email.</param>
            <param name="fileNamesToAttach">A fixed length array of strings representing local file names to be used as attachments.</param>
        </member>
        <member name="M:Mockup2.Classes.Emailer.SendAppointmentEmail(System.String,Mockup2.DatabaseClasses.Staff,System.DateTime,System.DateTime)">
            <summary>
            Sends a preformatted HTML email to the supplied email address, which should be a Patient's, detailing their appointment date and time
            as well as the member of staff they will be seeing.
            </summary>
            <param name="email">Email address of patient.</param>
            <param name="staff">The Staff object that representing the member of staff that the patient will be seeing.</param>
            <param name="date">The date of the appointment.</param>
            <param name="time">The time of the appointment.</param>
        </member>
        <member name="F:Mockup2.EditStaffForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.EditStaffForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.EditStaffForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.Factories.AbstractFactory">
            <summary>
            An astract factory class for othe table factories to inherit from. Provides
            some convenience methods for parsing data from the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetInt(System.Object)">
            <summary>
            Parses the given object as an int.
            </summary>
            <param name="o">Object to parse.</param>
            <returns>An int from the object.</returns>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetString(System.Object)">
            <summary>
            Converts the given object to a string. Simply calls
            <code>o.ToString()</code>
            </summary>
            <param name="o">The object to parse.</param>
            <returns>A string from the object.</returns>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetBool(System.Object)">
            <summary>
            Parses the object as a boolean.
            </summary>
            <param name="o">The object to parse.</param>
            <returns>A boolean representation of the object.</returns>
        </member>
        <member name="M:Mockup2.Factories.AbstractFactory.GetDateTime(System.Object)">
            <summary>
            Parses the object as a DateTime object.
            </summary>
            <param name="o">The object to parse.</param>
            <returns>A DateTime representation of the object, if possible.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetNextAvailableAppointmentID">
            <summary>
            Returns the next available appointment id. 
            </summary>
            <returns>Next available appointment id.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.SetNextAvailableAppointmentID">
            <summary>
            Sets the next available appointment id by pulling the last listed
            Appointment from the database. Should only be called once.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetTimeslots">
            <summary>
            Returns a list of formatted strings to be used as timeslots when booking an appointment.
            Timeslot increment is given as 10 minutes.
            </summary>
            <returns>A list of strings formatted in the following way: hh:mm:ss, for example: 09:40:00</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointments(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Returns a list of Appointments that match the critera given by the QueryBuilder.
            In order to get sensible results, the first part of the query should be:
            SELECT * FROM Appointment
            with only the Where changing.
            </summary>
            <param name="b">The QueryBuilder to use as the SQL query.</param>
            <returns>A list of Appointments that match the SQL query.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointments">
            <summary>
            Convenience method to return all appointments, with no matching criteria, ie everything.
            </summary>
            <returns>Every appointment in the database.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointmentsByDate(System.DateTime)">
            <summary>
            Conveience method that gets all appointments on a given date.
            </summary>
            <param name="date">The date to match appointments to.</param>
            <returns>A list of appointments booked for the date given.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.GetAppointmentsByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Convenience method that gets all appointments booked between the given dates.
            </summary>
            <param name="date1">The minimum bound date to look for.</param>
            <param name="date2">The maximum bound date to look for.</param>
            <returns>A list of appointments that fall between the given dates.</returns>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.UpdateAppointment(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Updates an existing appointment in the database, based on the information provided
            in the Appointment object.
            </summary>
            <param name="a">The Appointment to pull data from.</param>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.SendConfirmationEmail(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Sends a confirmation email to the patient linked to the appointment given.
            </summary>
            <param name="a">The appointment to notify the patient abour.</param>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.InsertAppointment(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Inserts a new appointment into the database, using information pulled from the given Appointment object.
            
            </summary>
            <param name="a">The appointment object to pull data from.</param>
        </member>
        <member name="M:Mockup2.Factories.AppointmentFactory.DeleteAppointment(Mockup2.DatabaseClasses.Appointment)">
            <summary>
            Deletes an appointment from the database based on information given in the supplied Appointment.
            </summary>
            <param name="a">The appointment object to delete.</param>
        </member>
        <member name="M:Mockup2.Factories.CustomTableFactory.GetCustomTable(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Retrieves the stored query from the QueryBuilder and executes it against the database
            provided by the dbCon. The results are stored as a list of dictionary objects keyed to a Column.
            The value is an object. Each dictionary represents a row in table.
            </summary>
            <param name="b">The QueryBuilder object containing the SQL query to invoke against the database.</param>
            <returns>A CustomTable that has the resulting 'table' as a list of <code>Dictionary&lt;Column, object&gt;</code></returns>
        </member>
        <member name="T:Mockup2.Factories.MedicalNoteFactory">
            <summary>
            Helper class to pull whole MedicalNote objects from the database based on various critera.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.GetMedicalNotes(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Gets all MedicalNote objects that match the given SQL query criteria contained in the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder containing the SQL query.</param>
            <returns>A list of MedicalNote objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.GetMedicalNotes(System.Int32)">
            <summary>
            Convenience method to get all MedicalNotes for a particular patient, keyed by their id.
            </summary>
            <param name="patientID">ID of the patient to get MedicalNotes for.</param>
            <returns>A list of MedicalNotes for the Patient given by id.</returns>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.GetMedicalNotes">
            <summary>
            Convenience method to get all the MedicalNotes in the database.
            </summary>
            <returns>A list of all MedialNotes in the database.</returns>
        </member>
        <member name="M:Mockup2.Factories.MedicalNoteFactory.InsertPatientNote(Mockup2.DatabaseClasses.Patient,System.Collections.Generic.List{System.String})">
            <summary>
            Convenience method to insert a new MedicalNotes object into the database.
            </summary>
            <param name="mn">The MedicalNotes object to pull data from.</param>
        </member>
        <member name="M:Mockup2.Factories.MedicationFactory.#ctor(Mockup2.DatabaseClasses.DBConnection)">
            <summary>
            Constructor inherits from Abstarct factory
            </summary>
            <param name="dbCon"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mockup2.Factories.MedicationFactory.md(Mockup2.DatabaseClasses.QueryBuilder)" -->
        <member name="M:Mockup2.Factories.MedicationFactory.getMedicationID(System.String)">
            <summary>
            
            </summary>
            <param name="scientificName"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.#ctor(Mockup2.DatabaseClasses.DBConnection)">
            <summary>
            Class inherits from the Abstract Factory class
            </summary>
            <param name="dbCon"></param>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.GetMedicationID(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            This method returns a list of medications from the database
            Takes a querybuilder as arguement
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.GetMedicineIdByPrescription(System.Int32)">
            <summary>
            This function returns a list of medication instances that belongs to a prescription
            This function only relevant from database connection and to assign a new prescription
            </summary>
            <param name="prescriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.GetMedicneNameById(System.Int32)">
            <summary>
            This method returns a list of medications when medication id entered
            </summary>
            <param name="medicineId"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.GetMedicationName(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            This method returns a medication list based on the query executed
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.getAllMedication">
            <summary>
            This method returns all the medications which are available in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.GetAllMedicationAvailable(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            This methos returns a list of medications 
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.MedicineInFactory.addmedicationInstance(Mockup2.DatabaseClasses.MedicationInstance)">
            <summary>
            This mehtod creates a connection in the database between two tables by entering medication instance table data
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:Mockup2.Factories.PrescriptionFactory">
            <summary>
            Convenience method to handle returning, updating, and inserting Prescription objects into the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetNextAvailablePrescriptionID">
            <summary>
            Returns the next available prescription id.
            </summary>
            <returns>Next available prescription id.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetPrescriptions(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Gets a list of Prescriptions from the database based on search critera provided by the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder containing the SQL code.</param>
            <returns>A list of <see cref="T:Mockup2.DatabaseClasses.Prescription"/>s.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetPrescriptions">
            <summary>
            Convenience method to get all prescriptions.
            </summary>
            <returns>A list of all <see cref="T:Mockup2.DatabaseClasses.Prescription"/>s</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetPrescriptions(System.Int32)">
            <summary>
            Convenience method to get all prescriptions based on the patient id they belong to.
            </summary>
            <param name="patientID">ID of the patient to find prescriptions for.</param>
            <returns>A list of <see cref="T:Mockup2.DatabaseClasses.Prescription"/>s.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.GetLastPrescriptionID">
            <summary>
            Gets the last available prescription id currently in the database.
            </summary>
            <returns>The last available prescription id.</returns>
        </member>
        <member name="M:Mockup2.Factories.PrescriptionFactory.InsertPrescription(Mockup2.DatabaseClasses.Prescription)">
            <summary>
            Inserts the supplied Prescription into the database. It's important to note that
            the Prescription must have a valid id, obtained using the
            <code>GetNextAvailableID()</code> method in this class. Any Prescriptions
            that have MedicationInstances linked to them will need to be inserted before
            the MedicationInstances are to avoid foreign key constraint problems.
            </summary>
            <param name="p">The <see cref="T:Mockup2.DatabaseClasses.Prescription"/> object to insert.</param>
        </member>
        <member name="T:Mockup2.Factories.StaffFactory">
            <summary>
            Convenience class to handle returning, updating, and inserting Staff objects into the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaffByID(System.Int32)">
            <summary>
            Gets a list of Staff by their ID number. This method should only return a list of size one, but
            that is not guranteed.
            </summary>
            <param name="id">ID of the staff member to look for.</param>
            <returns>A list of Staff.</returns>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaff(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Returns a list of Staff objects based on search critera given the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder containing the SQL code.</param>
            <returns>A list of staff.</returns>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaffByName(System.String,System.String)">
            <summary>
            Return a list of Staff members by their first and last name.
            </summary>
            <param name="firstName">First name to look for.</param>
            <param name="lastName">Last name to look for.</param>
            <returns>A list of Staff objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.StaffFactory.GetStaff">
            <summary>
            Convenience method to get all Staff members from the database.
            </summary>
            <returns>A list of all Staff</returns>
        </member>
        <member name="T:Mockup2.Factories.TestResultFactory">
            <summary>
            Convenience class to handle returning, updating, and inserting TestResult objects into the database.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.TestResultFactory.GetTestResults(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Get a list of TestResult objects based on search criteria given the QueryBuilder.
            </summary>
            <param name="b">QueryBuilder object.</param>
            <returns>A list of TestResult objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.TestResultFactory.GetTestResults(System.Int32)">
            <summary>
            Convenience method to get all 
            </summary>
            <param name="patientID"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.TestResultFactory.GetTestResults">
            <summary>
            Returns a list of test results from the database by using query builder
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mockup2.Factories.PatientFactory">
            <summary>
            Convenience class to handle pulling Patients from, and inserting Patients into, the database. As well as updating them.
            </summary>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.InsertPatient(Mockup2.DatabaseClasses.Patient)">
            <summary>
            Inserts the given <see cref="T:Mockup2.DatabaseClasses.Patient"/> information into the database.
            </summary>
            <param name="p">The <see cref="T:Mockup2.DatabaseClasses.Patient"/> to pull information from.</param>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.UpdatePatient(Mockup2.DatabaseClasses.Patient)">
            <summary>
            Updates the given <see cref="T:Mockup2.DatabaseClasses.Patient"/> information in the database.
            </summary>
            <param name="p">The <see cref="T:Mockup2.DatabaseClasses.Patient"/> to get updated information from.</param>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatients(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            Returns a list of <see cref="T:Mockup2.DatabaseClasses.Patient"/>s based on certain search criteria, provided
            by the QueryBuilder SQL code.
            </summary>
            <param name="b">QueryBuilder containing the SQL query to run.</param>
            <returns>A list of <see cref="T:Mockup2.DatabaseClasses.Patient"/> objects.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.DeletePatient(Mockup2.DatabaseClasses.Patient)">
            <summary>
            Delete an entry from the Patient table in the database,
            based on information given by the <see cref="T:Mockup2.DatabaseClasses.Patient"/> object.
            </summary>
            <param name="p"><see cref="T:Mockup2.DatabaseClasses.Patient"/> representation of information to delete.</param>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatientsByName(System.String,System.String)">
            <summary>
            Conveience method to get all <see cref="T:Mockup2.DatabaseClasses.Patient"/>s by their first and last name.
            Most of the time, this method is expected to return a list containing
            only one value. However, this cannot be guranteed as name collisions
            cannot be prevented. Similarly, it shouln't be assumed this method will
            always return at least one entry - sometimes it doesn't, if the patient cannot be found.
            </summary>
            <param name="firstName">Patient's first name.</param>
            <param name="lastName">Patient's last name.</param>
            <returns>A list of <see cref="T:Mockup2.DatabaseClasses.Patient"/>s that have the first and last name provided. Size of the list may be more than 1, or 0.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatientsByID(System.Int32)">
            <summary>
            Returns a <see cref="T:Mockup2.DatabaseClasses.Patient"/> by their Id number.
            </summary>
            <param name="ID">The ID to search for.</param>
            <returns>A list of <see cref="T:Mockup2.DatabaseClasses.Patient"/>s that match the ID. Should have a size of 1 almost always, but is a list just in case.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetAPatientByID(System.Int32)">
            <summary>
            This method returns a singel patient object from the database by ID
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatientByIdNumber(Mockup2.DatabaseClasses.QueryBuilder)">
            <summary>
            This method returns a single patient from the database
            Takes a querybuilder
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.GetPatients">
            <summary>
            Convenience method to return all <see cref="T:Mockup2.DatabaseClasses.Patient"/>s currently stored in the database.
            </summary>
            <returns>A list of all <see cref="T:Mockup2.DatabaseClasses.Patient"/>s.</returns>
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.getAPatient(System.String,System.String)">
            returns a patient object by finding it in the database by first and last name
            
        </member>
        <member name="M:Mockup2.Factories.PatientFactory.getPatient(System.String,System.String,Mockup2.DatabaseClasses.QueryBuilder)">
            Executes query in the database to return details to getAPatient() method
            
        </member>
        <member name="F:Mockup2.GPNurse.dbCon">
            Objects and variables used on the page
        </member>
        <member name="M:Mockup2.GPNurse.Init(Mockup2.DatabaseClasses.DBConnection)">
            initialises constructor 
            include time,database components
            
        </member>
        <member name="M:Mockup2.GPNurse.#ctor(Mockup2.DatabaseClasses.DBConnection)">
            Form 
            Initialises a next patient and database components
            
        </member>
        <member name="M:Mockup2.GPNurse.OK_Click(System.Object,System.EventArgs)">
            This button returns one patient from the database as an object
            can be by name or nhs number
            
        </member>
        <member name="M:Mockup2.GPNurse.cleanAll">
            This method is created to clear the from from data
            
        </member>
        <member name="M:Mockup2.GPNurse.loadCurrentPatient">
            This button (Viev this patient details) loads in selected patient details on the page
            
        </member>
        <member name="M:Mockup2.GPNurse.getPrescriptionNameIssueDate">
            This function returns all prescription details that belongs to the current patient
            
        </member>
        <member name="M:Mockup2.GPNurse.getPrescriptions">
            This function returns prescription object that is currently loaded with current patient
            this function is specific and return a specific value
            
        </member>
        <member name="M:Mockup2.GPNurse.getTestresults">
            This function reads the testresults from the object list and returns it as a string
            This function is not global but specified to test name and testdate
            
        </member>
        <member name="M:Mockup2.GPNurse.foundPatientObject">
            This function initialises current patient to the patient who has been searched and selecet in the searchbox
            
        </member>
        <member name="M:Mockup2.GPNurse.swapPatient(Mockup2.DatabaseClasses.Patient)">
            This function swaps the current patient to the next patient
            from next or from search
            
        </member>
        <member name="M:Mockup2.GPNurse.textBoxWriter(System.Collections.Generic.List{System.String},System.Windows.Forms.RichTextBox)">
            Prinitg any list <string></string> data into the textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.ListBoxWriter(System.Collections.Generic.List{System.String},System.Windows.Forms.ListBox)">
            Prinitg any list <string></string> data into the textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.getNextPatient">
            This function initalises the next patient when an appointment is booked for the day
            
        </member>
        <member name="M:Mockup2.GPNurse.textBoxCleaner(System.Windows.Forms.RichTextBox)">
            Clears selected textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.textBoxCleaner(System.Windows.Forms.TextBox)">
            Clears selected textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.ListBoxCleaner(System.Windows.Forms.ListBox)">
            Clears selected textbox
            
        </member>
        <member name="M:Mockup2.GPNurse.clear_Click(System.Object,System.EventArgs,System.Windows.Forms.ListBox)">
            This function clears all the listboxes present on this form
            
        </member>
        <member name="M:Mockup2.GPNurse.addNote">
            This method displays the note in the medical history box after added
            
        </member>
        <member name="M:Mockup2.GPNurse.save_Click(System.Object,System.EventArgs)">
            Saves the note into a string array that prepares the note to be saved in the database
            changes only apply when the current patient changes are saved through save() method
            
        </member>
        <member name="M:Mockup2.GPNurse.undo_Click(System.Object,System.EventArgs)">
            This is the removes modified changes from the medical history that has been added currently
            
        </member>
        <member name="M:Mockup2.GPNurse.saveChanges">
            prompting the user to save their work (curently loaded patient)
            
        </member>
        <member name="M:Mockup2.GPNurse.nextButton_Click(System.Object,System.EventArgs)">
            Loads the next patient who has been labeled by this button 
            this button also saves the currently loaded patient before the next patient loaded onto the form
            
        </member>
        <member name="M:Mockup2.GPNurse.exitButton_Click(System.Object,System.EventArgs)">
            The exit button leaves the form and asks to save a patient who currently loaded onto the form
            
        </member>
        <member name="M:Mockup2.GPNurse.timeNow">
            gets the date and time now but only shows current time of the system
            
        </member>
        <member name="M:Mockup2.GPNurse.TimeLabel_Click(System.Object,System.EventArgs)">
            Initialised a clock on the form
            
        </member>
        <member name="M:Mockup2.GPNurse.timer2_Tick_1(System.Object,System.EventArgs)">
            Timer is running ad refreshing the form (checks for patient when time passes)
            
        </member>
        <member name="M:Mockup2.GPNurse.timer1_Tick(System.Object,System.EventArgs)">
            Timer action 
            update time and next patient
            
        </member>
        <member name="M:Mockup2.GPNurse.searchBox_MouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            Allows double clik on the patient who has been searched from the database
            when double clik action occurs then the patient will be loaded onto the form
            
        </member>
        <member name="M:Mockup2.GPNurse.testResultsListBox_DoubleClick(System.Object,System.EventArgs)">
            Double click on the testresults box allows to read a prescription object with more detail
            
        </member>
        <member name="M:Mockup2.GPNurse.prescriptionsListBox_DoubleClick(System.Object,System.EventArgs)">
            allows prescription management
            double click to read object
            
        </member>
        <member name="M:Mockup2.GPNurse.allow_Click(System.Object,System.EventArgs)">
            Allow prescription in the prescrioption list to be repeated
            
        </member>
        <member name="M:Mockup2.GPNurse.decline_Click(System.Object,System.EventArgs)">
            Changes the is repeateable to false
            repeate not allowed
            
        </member>
        <member name="M:Mockup2.GPNurse.saveModifiedPrescription">
            saves the modified prescrioption
            
        </member>
        <member name="M:Mockup2.GPNurse.editButton_Click_1(System.Object,System.EventArgs)">
            Changes the true or false where the prescription is repeatable
            
        </member>
        <member name="M:Mockup2.GPNurse.button3_Click(System.Object,System.EventArgs)">
            AddButton
            calls the prescription form to create a new prescirption
            
        </member>
        <member name="F:Mockup2.GPNurse.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.GPNurse.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.GPNurse.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.loginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.loginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.loginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.MessagePatientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.MessagePatientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.MessagePatientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.RegisterNewPatientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.RegisterNewPatientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.RegisterNewPatientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.ViewMedicalHistoryForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.ViewMedicalHistoryForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.ViewMedicalHistoryForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.ViewPrescriptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.ViewPrescriptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.ViewPrescriptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.PatientForms.ViewTestHistoryForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.PatientForms.ViewTestHistoryForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.PatientForms.ViewTestHistoryForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.ReceptionistForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.ReceptionistForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.ReceptionistForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.ResetPasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.ResetPasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.ResetPasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.RotaForms.SeeStaffRotaForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.RotaForms.SeeStaffRotaForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.RotaForms.SeeStaffRotaForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.SeeStaffListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.SeeStaffListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.SeeStaffListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mockup2.Support.AppointmentSort.connection">
            Dataset and factory for the appointments
            
        </member>
        <member name="M:Mockup2.Support.AppointmentSort.#ctor(Mockup2.DatabaseClasses.DBConnection)">
            <summary>
            Constructor takes a database connection
            </summary>
            <param name="dbcon"></param>
        </member>
        <member name="M:Mockup2.Support.AppointmentSort.initSet">
            <summary>
            Initialises the appointments list from the database (Today)
            </summary>
        </member>
        <member name="M:Mockup2.Support.AppointmentSort.runSort">
            <summary>
            Boublesort algorithm
            </summary>
        </member>
        <member name="M:Mockup2.Support.AppointmentSort.removeExpired">
            <summary>
            This method removes the expired appointments from the list (can be set by hardcode)
            </summary>
        </member>
        <member name="M:Mockup2.Support.AppointmentSort.getNextAppointment">
            <summary>
            This method return next appointment object
            catching if the list is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Support.AppointmentSort.removeAppointment">
            <summary>
            This method is used to remove appointment before the next sort
            only used when the appointment is skipped or served
            </summary>
        </member>
        <member name="F:Mockup2.Support.DatabaseConverter.dbCon">
            Objecst and datasets used in this class
            
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.#ctor(Mockup2.DatabaseClasses.DBConnection,Mockup2.DatabaseClasses.Patient)">
            <summary>
            Constructor takes a database and a patient object
            loads the patient object onto the GPNurse form
            </summary>
            <param name="dbCon"></param>
            <param name="patientObject"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.#ctor(Mockup2.DatabaseClasses.DBConnection)">
            <summary>
            Constructor
            Constructor takes a database connection (manage class without stating a patient)
            </summary>
            <param name="dbCon"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.getPrescription">
            <summary>
            </summary>
            <returns>patient prescriptions as string</returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.GetPrescription">
            <summary>
            Returns prescriptions for the current patient as object(managable)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.getTestResults">
            <summary>
            patient test results as an object (managable)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.HistoryData">
            <summary>
            </summary>
            <returns>medical history for the current patient</returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.InitClass(Mockup2.DatabaseClasses.DBConnection)">
            <summary>
            This function initialises this class(important)
            </summary>
            <param name="dbCon"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.PrescriptionData">
            <summary>
            </summary>
            <returns> returns prescription data for current patient as string</returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.TestResults">
            <summary>
            </summary>
            <returns>patient test results as string </returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.findPatientByName(System.String,System.String)">
            <summary>
            Takes two arguements to return a patient object by first and last name
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.removeAppointment">
            <summary>
            removes an appointment from the currrent list until next update, NOT FROM THE DATABASE
            </summary>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.loadList">
            <summary>
            loads medical history, prescriptions and test results for the current patient
            (Current patient is who has been initialised by load(Patient o))
            </summary>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.load(Mockup2.DatabaseClasses.Patient)">
            <summary>
            This method fills up datasets for a selected patient 
            therefore lists can return recent updates as current patient
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.insertPatientNote(Mockup2.DatabaseClasses.Patient,System.Collections.Generic.List{System.String})">
            <summary>
            this function allows patinet notes to be modified
            </summary>
            <param name="p"></param>
            <param name="newNotes"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.editPrescription(System.Collections.Generic.List{Mockup2.DatabaseClasses.Prescription})">
            <summary>
            This function allows a prescription to be override
            </summary>
            <param name="pre"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.removePrescription(Mockup2.DatabaseClasses.Prescription)">
            <summary>
            This function allows a prescription removal from the database
            </summary>
            <param name="pre"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.addPrescription(Mockup2.DatabaseClasses.Prescription)">
            <summary>
            This function adds a new prescription to the database
            </summary>
            <param name="pre"></param>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.InitNextPatient">
            <summary>
            This method prepares the next patient object from the appointment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mockup2.Support.DatabaseConverter.nextPatientAppointment">
            <summary>
            This method returns next appintment
            </summary>
            <returns></returns>
        </member>
        <member name="F:Mockup2.UpdateStaff.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mockup2.UpdateStaff.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mockup2.UpdateStaff.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mockup2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.appointmentmessage">
            <summary>
              Looks up a localized string similar to &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional //EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:v=&quot;urn:schemas-microsoft-com:vml&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;&gt;&lt;head&gt;
               &lt;!--[if gte mso 9]&gt;&lt;xml&gt;
                &lt;o:OfficeDocumentSettings&gt;
                 &lt;o:AllowPNG/&gt;
                 &lt;o:PixelsPerInch&gt;96&lt;/o:PixelsPerInch&gt;
                &lt;/o:OfficeDocumentSettings&gt;
               &lt;/xml&gt;&lt;![endif]--&gt;
               &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.facebook_2x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.favicon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.formattedemail">
            <summary>
              Looks up a localized string similar to &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional //EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:v=&quot;urn:schemas-microsoft-com:vml&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;&gt;&lt;head&gt;
               &lt;!--[if gte mso 9]&gt;&lt;xml&gt;
                &lt;o:OfficeDocumentSettings&gt;
                 &lt;o:AllowPNG/&gt;
                 &lt;o:PixelsPerInch&gt;96&lt;/o:PixelsPerInch&gt;
                &lt;/o:OfficeDocumentSettings&gt;
               &lt;/xml&gt;&lt;![endif]--&gt;
               &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.googleplus_2x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.logo1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.MySql_Data">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.nhs_logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.okok">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mockup2.Properties.Resources.twitter_2x">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
